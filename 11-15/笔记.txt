1.create-react-app
    * 安装 -> npm install -g create-react-app
    * 创建项目 -> create-react-app 项目名字
    * 运行 -> npm start

2. 项目结构
   * src 源文件
      index.js  入口js文件
   * public 静态文件
      index.html 入口HTML文件
3.读取数据
    * 直接fetch
4.组件传值
    * flux  redux?
    * 父 -> 子
        子： 需要暴露方法
        父： 通过ref引用子级 -> 子级.方法（）---this.refs.cmp1.addCount();
    * 子 -> 父
        父： 需要暴露方法
        子： 引用父级.方法（）
    **暴露方法
        父 -> ref
        子 -> props
    ***统一管理
        redux
5. route 里加exact  表示精确匹配路径
6. 使用router
    *最外层加<BrowserRouter>
    //单一父级
        <div>
            ...
            //类似<select>
            <Switch>
                //类似<option>
                <Route exact path='xxx' component={component1}/>
                <Route path='xxx/:id' component={component2}/>
            </Switch>
        </div>

    </BrowserRouter>
7.跳转路由
    * <Link to='path'>xxx</Link>
    *路由参数
        this.props.match.params/:id(传id)
8.redux   统一数据管理
    *import {createStore} from 'redux';  //第一步，引入createStore from redux
    *创建store(存储）对象
        const store=createStore(function(state,action){
            // 1.所有创建存储空间(state:只有这一个state对象，从头到尾的，到目前为止的状态)的操作都在这完成
            // 2. 每当操作修改数据操作（action），这个函数都会被使用，根据action修改state   state必须是唯一的

            return state；
            // 每次操作必须返回state，否则state就会是undefined。
        })；
    * 使用store对象,设置
        store.dispatch({type, xxx});
        读取
        store.getState();
        订阅(有修改的时候会通知你)
        store.subscribe(function(){});

        **
            createStore(function (state, action) {  //该函数会在 修改 ，初始化 的时候执行
                return state;    //必须返回state

            });
            store.dispatch({action}); // dispatch传值给action（数据是这样的：type：‘xxx’）
            store.getState() ==> 得到state对象
            store.subscribe(function(){   //修改状态时被触发

            })
